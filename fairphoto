
//silver version INCOMPLETE
import java.util.*;
import java.io.*;
 class fairphoto {
	static int n;
	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		Scanner in = new Scanner(new File("fairphoto.in"));
		n = in.nextInt();
		ArrayList<Cow>cows = new ArrayList<>();
		ArrayList<Cow> evens = new ArrayList<>(); //this will store even ps
		ArrayList<Cow> odd = new ArrayList<>();// this will store odd ps 
		for(int i = 0; i < n; i++)
		{
			cows.add(new Cow(in.nextInt(), -2, in.next().equals("W") ? 1 : -1));
		}
		in.close();
		int result = 0;
		//Loop. First see where PS should belong (check first if in ascneding order, then if even or odd)
		//Update PS (use lambda function)
		//Calculate max distance
		int cumSum = 0;
		Collections.sort(cows);
		for(Cow i : cows) System.out.println("Cow position: " + i.oPos + " cow value: " + i.value);
		for(int i = 1; i <= n; i++) {
			//System.out.println(cumSum + " when i is " + i);
			if( cumSum % 2 == 0) {
				//System.out.println("this ran 1");
				if(evens.isEmpty() ||  evens.get(evens.size()-1).ps <= cumSum) {
				//	System.out.println("Opos: " + cows.get(i).oPos + " cumSum: " + cumSum + " W or S: " + cows.get(i).value);
					evens.add(new Cow(cows.get(i-1).oPos, cumSum, cows.get(i-1).value));
				}
			}else {
				//System.out.println("this ran 2");
				if( odd.isEmpty() ||  odd.get(odd.size()-1).ps<= cumSum) {
				//	System.out.println("Opos: " + cows.get(i).oPos + " cumSum: " + cumSum + " W or S: " + cows.get(i).value);
					odd.add(new Cow(cows.get(i-1).oPos, cumSum, cows.get(i-1).value));
				}
			}
			//update
			cumSum += cows.get(i-1).value;
			if(cumSum % 2 == 1) {
				for(int j = 0; j < odd.size(); j++) {
					if(!odd.isEmpty() && cumSum > odd.get(j).ps && odd.get(j).ps >= 0 ) {
						result = Math.max(result, cows.get(i).oPos - odd.get(j).oPos);
						//System.out.println("this ran 3");
						//System.out.println("Opos: this cow  " + cows.get(i).oPos + " Opos: checked cow " + odd.get(j).oPos );
						break;
						
					}
				}
			}else {
				for(int j = 0; j < evens.size(); j++) {
					if(!evens.isEmpty() && cumSum > evens.get(j).ps && evens.get(j).ps >= 0 ) {
						result = Math.max(result, cows.get(i).oPos - evens.get(j).oPos);
					//System.out.println("this ran 4");
						//System.out.println("Opos: this cow  " + cows.get(i).oPos + " Opos: checked cow " + evens.get(j).oPos );
						break;
					}
				}
			}
			
			
			
		}
		for(Cow x : evens) System.out.println("cow oPos: " +  x.oPos + " cow cumSum: " + x.ps + " cow value: " + x.value);
		for(Cow x : odd) System.out.println("cow oPos: " +  x.oPos + " cow cumSum: " + x.ps + " cow value: " + x.value);
		PrintWriter out = new PrintWriter(new File("fairphoto.out"));
		out.println(result);
		System.out.println(result);
		out.close();
	}
	
	static class Cow implements Comparable<Cow>{
		int oPos;
		int ps = 0;
		int value = 0;
		Cow(int o, int ps, int val){
			oPos = o;
			value = val;
			this.ps = ps;
		}
		public int compareTo(Cow other) {
			return this.oPos - other.oPos;
		}
		
	}

}

/* Outline:
Use the concept of prefix sum and binary search.
Learn how to use lambda and Token scanner

We have to find a range of cows where the cows' number sum is a nonnegative even number
Given a range of cows with W, S, we will find the prefix sum, with W having a value of 1
and S having a value of -1. Then, we use two difference pairs for even and odd prefix sums. 
We loop through the array of cows, calculate prefix sum. At each prefix sum, we using binary search to
find all possible positions of prefix sum which is LESS than our prefix sum. Then, we find the range
with the biggest size. 

Let us create an ArrayList of Cows (prefix sum and pos in the problem).
Let us create two ArrayList of Cows with either even or odd prefix sums.
Let us create a binary function to find the position where PS is still less than the target PS (?)
Let us loop through from 0, to that position to find the max distance of our value ij


*/

/*
import java.io.*;
import java.util.*;
class Main {
  static int n;
  static Cow[] cows;
  public static void main(String[] args) throws FileNotFoundException {
    Scanner in = new Scanner(new File("fairphoto.in"));
    n = in.nextInt();
    cows = new Cow[n];
    for(int i = 0; i < n; i++){
        int heehee = in.nextInt();
        String ah = in.next();
        if (ah.equals("W")){
         cows[i] = new Cow(heehee, 1);
        }else cows[i] = new Cow(heehee, -1);
    }
    Arrays.sort(cows);
    //for(Cow i : cows) System.out.println(i.oPos);
    in.close();

    int result = 0;
    int ps = 0;
    ArrayList<Cow> even = new ArrayList<>(); //even ps
    ArrayList<Cow> odd = new ArrayList<>(); //odd ps
    for(int i = 1; i <= n; i++){
      ps = ps + cows[i-1].value;
      System.out.println(ps);
      if(even.isEmpty() || ps % 2 == 0){
        //add to even list
        Cow o = new Cow(cows[i-1].oPos, cows[i-1].value);
        o.ps = ps;
        even.add(o);
        int counter = binarySearch(odd, ps);
        while(!odd.isEmpty() && counter >=0 && odd.get(counter).ps <= ps){
          result = Math.max(result, o.oPos - odd.get(counter).oPos );
          counter--; 
        }
      }else{
        //add to odd list
        Cow o = new Cow(cows[i-1].oPos, cows[i-1].value);
        o.ps = ps;
        odd.add(o);
        int counter = binarySearch(even, ps);
        while(!even.isEmpty() && counter >= 0 && even.get(counter).ps <= ps){
          result = Math.max(result, o.oPos - even.get(counter).oPos );
          counter--; 
        }
      }
    }
    PrintWriter out = new PrintWriter(new File("fairphoto.out"));
    out.println(result);
    System.out.println(result);
    out.close();
  }

  static int binarySearch(ArrayList<Cow> moo, int targetPs){
    //find most right position with ps less than or equal to current ps
    //TODO check boundaries afterschool 
    if(moo.isEmpty()) return 0;
    int left = 0;
    int right = moo.size();
    int mid = (left + right)/2; 
    //TODO: while loop
    while(left < right){
      if(moo.get(mid).ps <= targetPs){
        //TOOD: change if statement to same position 
        if(mid + 1 < moo.size() && moo.get(mid + 1).ps > targetPs) return mid+1;
        left = mid;
      }else{ //moo.get(mid).ps > targetPs
        mid = right; 
      }
    }
      return 0;
  }

  static class Cow implements Comparable<Cow>{
    int oPos, value;
    int ps; //IODO: initiate this 
    Cow(int o, int val){
        oPos = o;
        //TODO: change into lambda function later
        value = val; 
    }
    public int compareTo(Cow other){
      return this.oPos - other.oPos;
    }
  }
}
*/
